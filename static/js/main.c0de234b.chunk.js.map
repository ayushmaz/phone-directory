{"version":3,"sources":["serviceWorker.js","Header.js","AddSuscriber.js","ShowSuscriber.js","EditSuscriber.js","PhoneDirectory.js","index.js"],"names":["Boolean","window","location","hostname","match","Header","props","className","header","AddSuscriber","inputChangedHandler","e","state","target","name","value","setState","onFormSubmitted","preventDefault","addSuscriberHandler","id","phone","history","push","this","to","onSubmit","bind","htmlFor","type","onChange","Component","ShowSuscriber","onDeletedClick","subscriberID","deleteSuscriberHandler","onEditClicked","editSubscriberHandler","subscriberList","map","sub","key","onClick","EditSuscriber","updateSubscriberList","console","log","editID","Container","style","marginTop","Button","variant","Form","Group","controlId","Label","Control","width","PhoneDirectory","subscribersList","subscriberIndex","forEach","subscriber","index","splice","newSuscriber","length","info","editInfo","exact","path","render","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c0de234b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport './Header.css'\r\n\r\nconst Header = function (props) {\r\n    //inline stylinggi\r\n    // const headerStyle = {\r\n    //     textAlign: 'center',\r\n    //     padding: 20,\r\n    //     textTransform: 'uppercase',\r\n    //     background: '#000',\r\n    //     color: '#fff'\r\n    // };\r\n    return (\r\n        <div className='header'>\r\n            {props.header}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n//we dont need a class component as there is no state\r\n// class Header extends Component{\r\n//     render(){\r\n//         return(<div>Phone Directory</div>);\r\n//     }\r\n// }\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport Header from './Header';\r\nimport './AddSuscriber.css'\r\nimport {Link} from 'react-router-dom'\r\n\r\nclass AddSuscriber extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            id: 0,\r\n            name: '',\r\n            phone: ''\r\n        }\r\n    }\r\n\r\n    inputChangedHandler = e => {\r\n        const state = this.state\r\n        state[e.target.name] = e.target.value;\r\n        this.setState(state)\r\n    }\r\n\r\n    onFormSubmitted = (e)=>{\r\n        e.preventDefault()\r\n        this.props.addSuscriberHandler(this.state)\r\n        this.setState({id: 0  , name : '' , phone : ''})\r\n        this.props.history.push('/phone-directory')\r\n    }\r\n\r\n    render() {\r\n        const { name, phone } = this.state\r\n        return (\r\n            <div>\r\n                <Header header=\"Add Suscriber\" />\r\n                <div className=\"component-body-container\">\r\n                    <Link to=\"/phone-directory\"><button className=\"custom-btn\">BACK</button></Link>\r\n                    <form className=\"subscriber-form\" onSubmit = {this.onFormSubmitted.bind(this)}>\r\n                        <label htmlFor=\"name\" className=\"label-control\">Name</label><br />\r\n                        <input type=\"text\" id=\"name\" className=\"input-control\" name=\"name\" onChange={this.inputChangedHandler}></input><br /><br />\r\n                        <label htmlFor=\"phone\" className=\"label-control\">Phone</label><br />\r\n                        <input type=\"text\" id=\"phone\" className=\"input-control\" name=\"phone\" onChange={this.inputChangedHandler}></input><br />\r\n                        <div className=\"subscriber-info-container\">\r\n                            <span className=\"subscriber-to-add-heading\">Subscriber to add heading: </span><br />\r\n                            <span className=\"subscriber-info\">Name: {name}</span><br />\r\n                            <span className=\"subscriber-info\">Phone: {phone}</span><br />\r\n                        </div>\r\n                        <button type=\"submit\" className=\"custom-btn add-btn\">Add</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddSuscriber;","import Header from './Header'\r\nimport './ShowSuscriber.css';\r\nimport React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom'\r\n\r\nclass ShowSuscriber extends Component {\r\n\r\n  onDeletedClick = subscriberID => {\r\n    this.props.deleteSuscriberHandler(subscriberID)\r\n  }\r\n\r\n  onEditClicked = subscriberID =>{\r\n    this.props.editSubscriberHandler(subscriberID)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n\r\n      <div >\r\n        <Header header=\" Phone Directory\" />\r\n        <div className=\"component-body-container\">\r\n          <Link to=\"/add\"><button className=\"custom-btn add-btn\">Add</button></Link>\r\n\r\n          <div className=\"grid-container heading-container\">\r\n            <span className=\"grid-item name-heading\">Name</span>\r\n            <span className=\"grid-item phone-heading\">Phone</span>\r\n          </div>\r\n\r\n          {this.props.subscriberList.map(sub => {\r\n            return <div key={sub.id} className=\"grid-container\">\r\n              <span className=\"grid-item \">{sub.name}</span>\r\n              <span className=\"grid-item \">{sub.phone}</span>\r\n              <span className=\"grid-item\">\r\n                <button className=\"custom-btn delete-btn\" onClick={this.onDeletedClick.bind(this, (sub.id))}>Delete</button>\r\n                <Link to='/edit'><button onClick={this.onEditClicked.bind(this, (sub.id))} className=\"custom-btn edit-btn\">Edit</button></Link>\r\n              </span>\r\n            </div>\r\n          })}\r\n\r\n\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ShowSuscriber;\r\n\r\n// function App() {\r\n//   let subscribers = [\r\n//     {\r\n//       id: 1,\r\n//       name: \"Ayush\",\r\n//       phone: \"0000000000\"\r\n//     },\r\n//     {\r\n//       id: 2,\r\n//       name: \"Niharika\",\r\n//       phone: \"8888888888\"\r\n//     }\r\n//   ];\r\n\r\n// }\r\n\r\n","import React, { Component, Fragment } from 'react';\r\nimport { Button, Container, Form } from 'react-bootstrap';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport Header from './Header';\r\n\r\nclass EditSuscriber extends Component {\r\n\r\n    state = {\r\n        name : '',\r\n        phone : ''\r\n    }\r\n\r\n    componentDidMount(){\r\n        const {name , phone} = this.props.editID\r\n        this.setState({\r\n            name : name,\r\n            phone : phone\r\n        })\r\n    }\r\n\r\n    inputChangedHandler = e => {\r\n        const state = this.state\r\n        state[e.target.name] = e.target.value;\r\n        this.setState(state)\r\n    }\r\n\r\n    updateSubscriberList = e => {\r\n        console.log('running')\r\n        e.preventDefault();\r\n        const {name , phone} = this.state\r\n        this.props.updateSubscriberList(this.props.editID.id,name,phone)\r\n        this.props.history.push('/phone-directory')\r\n    }\r\n\r\n    render() {\r\n        if(this.props.editID === ''){\r\n            return <Redirect to='/phone-directory'/>\r\n        }\r\n        return (\r\n            <Fragment>\r\n                <Header header=\"Edit Subscriber\" />\r\n\r\n                <Container style = {{marginTop:\"20px\"}}>\r\n                    <Link to=\"/phone-directory\"><Button variant=\"secondary\">BACK</Button></Link>\r\n                    <Form onSubmit={this.updateSubscriberList} style={{marginTop:\"20px\"}} >\r\n                        <Form.Group controlId=\"editFormName\">\r\n                            <Form.Label>Name</Form.Label>\r\n                            <Form.Control name=\"name\" onChange={this.inputChangedHandler} value={this.state.name} style={{width:\"30%\"}} />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group className=\"auto\" controlId=\"editFormNumber\">\r\n                            <Form.Label>Phone</Form.Label>\r\n                            <Form.Control name=\"phone\" onChange={this.inputChangedHandler} value={this.state.phone} style={{width:\"30%\"}} type=\"phone\" />\r\n                        </Form.Group>\r\n                        <Button variant=\"primary\" type=\"submit\">\r\n                            Submit\r\n                        </Button>\r\n                    </Form>\r\n                </Container>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EditSuscriber;","import React, { Component } from 'react';\r\nimport AddSuscriber from './AddSuscriber';\r\nimport ShowSuscriber from './ShowSuscriber';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport EditSuscriber from './EditSuscriber';\r\n\r\nclass PhoneDirectory extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            subscriberList: [],\r\n            editInfo: ''\r\n        }\r\n    }\r\n\r\n    deleteSuscriberHandler = (id) => {\r\n        let subscribersList = this.state.subscriberList\r\n        let subscriberIndex = 0\r\n        subscribersList.forEach(function (subscriber, index) {\r\n            if (subscriber.id == id) {\r\n                subscriberIndex = index\r\n            }\r\n        }, this)\r\n\r\n        subscribersList.splice(subscriberIndex, 1)\r\n        this.setState({ subscriberList: subscribersList })\r\n    }\r\n\r\n    addSuscriberHandler = (newSuscriber) => {\r\n        let subscribersList = this.state.subscriberList;\r\n        if (subscribersList.length > 0) {\r\n            newSuscriber.id = subscribersList[subscribersList.length - 1].id + 1;\r\n        } else {\r\n            newSuscriber.id = 1;\r\n        }\r\n        subscribersList.push(newSuscriber)\r\n        this.setState({ subscriberList: subscribersList })\r\n        console.log(this.state.subscriberList)\r\n    }\r\n\r\n    updateSubscriberList = (id,name,phone) => {\r\n        let subscribersList = this.state.subscriberList\r\n        let subscriberIndex = 0\r\n        subscribersList.forEach(function (subscriber, index) {\r\n            if (subscriber.id == id) {\r\n                console.log('name:', name)\r\n                subscriber.name = name;\r\n                subscriber.phone = phone\r\n                console.log(\"After:\",subscriber)\r\n            }\r\n        }, this)\r\n        this.setState({ subscriberList: subscribersList })\r\n    }\r\n\r\n    editSubscriberHandler = id => {\r\n        const info = {}\r\n        let subscribersList = this.state.subscriberList\r\n        subscribersList.forEach(function (subscriber, index) {\r\n            if (subscriber.id == id) {\r\n                info['id'] = id;\r\n                info['name'] = subscriber.name;\r\n                info['phone'] = subscriber.phone\r\n            }\r\n        }, this)\r\n        this.setState({ editInfo: info })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Router>\r\n                    <div className=\"main-container\">\r\n                        <Route exact path='/phone-directory' render={(props) => <ShowSuscriber {...props}\r\n                            subscriberList={this.state.subscriberList}\r\n                            deleteSuscriberHandler={this.deleteSuscriberHandler}\r\n                            editSubscriberHandler={this.editSubscriberHandler}\r\n                        />}\r\n\r\n                        />\r\n                        <Route exact path='/add' render={({ history }, props) => <AddSuscriber history={history} {...props} addSuscriberHandler={this.addSuscriberHandler} />} />\r\n                        <Route exact path='/edit' render={({ history }, props) => <EditSuscriber history={history} {...props} updateSubscriberList={this.updateSubscriberList} editID={this.state.editInfo} />} />\r\n                    </div>\r\n                </Router>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PhoneDirectory;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport './common/common.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport PhoneDirectory from './PhoneDirectory';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <PhoneDirectory />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}