{"version":3,"sources":["Header.js","ShowSuscriber.js","AddSuscriber.js","serviceWorker.js","PhoneDirectory.js","index.js"],"names":["Header","props","className","header","ShowSuscriber","to","this","subscriberList","map","sub","key","id","name","phone","Component","AddSuscriber","inputChangedHandler","e","state","target","value","setState","onFormSubmitted","preventDefault","addSuscriberHandler","history","push","onSubmit","bind","htmlFor","type","onChange","Boolean","window","location","hostname","match","PhoneDirectory","newSuscriber","subscribersList","length","console","log","exact","path","render","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8VA2BeA,G,MAxBA,SAAUC,GASrB,OACI,yBAAKC,UAAU,UACVD,EAAME,U,eCuBJC,E,uKA7BX,OAEE,6BACE,kBAAC,EAAD,CAAQD,OAAO,qBACf,yBAAKD,UAAU,4BACb,kBAAC,IAAD,CAAMG,GAAG,QAAO,4BAAQH,UAAU,sBAAlB,QAEhB,yBAAKA,UAAU,oCACb,0BAAMA,UAAU,0BAAhB,QACA,0BAAMA,UAAU,2BAAhB,UAGDI,KAAKL,MAAMM,eAAeC,KAAI,SAAAC,GAC7B,OAAO,yBAAKC,IAAKD,EAAIE,GAAIT,UAAU,kBACjC,0BAAMA,UAAU,cAAcO,EAAIG,MAClC,0BAAMV,UAAU,cAAcO,EAAII,OAClC,0BAAMX,UAAU,aACd,4BAAQA,UAAU,yBAAlB,qB,GApBYY,aCiDbC,G,wDA/CX,aAAe,IAAD,8BACV,gBAQJC,oBAAsB,SAAAC,GAClB,IAAMC,EAAQ,EAAKA,MACnBA,EAAMD,EAAEE,OAAOP,MAAQK,EAAEE,OAAOC,MAChC,EAAKC,SAASH,IAZJ,EAedI,gBAAkB,SAACL,GACfA,EAAEM,iBACF,EAAKtB,MAAMuB,oBAAoB,EAAKN,OACpC,EAAKG,SAAS,CAACV,GAAI,EAAKC,KAAO,GAAKC,MAAQ,KAC5C,EAAKZ,MAAMwB,QAAQC,KAAK,MAjBxB,EAAKR,MAAQ,CACTP,GAAI,EACJC,KAAM,GACNC,MAAO,IALD,E,qDAsBJ,IAAD,EACmBP,KAAKY,MAArBN,EADH,EACGA,KAAMC,EADT,EACSA,MACd,OACI,6BACI,kBAAC,EAAD,CAAQV,OAAO,kBACf,yBAAKD,UAAU,4BACX,kBAAC,IAAD,CAAMG,GAAG,oBAAmB,4BAAQH,UAAU,cAAlB,SAC5B,0BAAMA,UAAU,kBAAkByB,SAAYrB,KAAKgB,gBAAgBM,KAAKtB,OACpE,2BAAOuB,QAAQ,OAAO3B,UAAU,iBAAhC,QAA4D,6BAC5D,2BAAO4B,KAAK,OAAOnB,GAAG,OAAOT,UAAU,gBAAgBU,KAAK,OAAOmB,SAAUzB,KAAKU,sBAA6B,6BAAM,6BACrH,2BAAOa,QAAQ,QAAQ3B,UAAU,iBAAjC,SAA8D,6BAC9D,2BAAO4B,KAAK,OAAOnB,GAAG,QAAQT,UAAU,gBAAgBU,KAAK,QAAQmB,SAAUzB,KAAKU,sBAA6B,6BACjH,yBAAKd,UAAU,6BACX,0BAAMA,UAAU,6BAAhB,+BAA8E,6BAC9E,0BAAMA,UAAU,mBAAhB,SAAyCU,GAAY,6BACrD,0BAAMV,UAAU,mBAAhB,UAA0CW,GAAa,8BAE3D,4BAAQiB,KAAK,SAAS5B,UAAU,sBAAhC,c,GAzCGY,cCOPkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCoBSC,E,kDAhCX,aAAe,IAAD,8BACV,gBAMJb,oBAAsB,SAACc,GACnB,IAAIC,EAAkB,EAAKrB,MAAMX,eAC7BgC,EAAgBC,OAAS,EACzBF,EAAa3B,GAAK4B,EAAgBA,EAAgBC,OAAS,GAAG7B,GAAK,EAEnE2B,EAAa3B,GAAK,EAEtB4B,EAAgBb,KAAKY,GACrB,EAAKjB,SAAS,CAAEd,eAAgBgC,IAChCE,QAAQC,IAAI,EAAKxB,MAAMX,iBAdvB,EAAKW,MAAQ,CACTX,eAAgB,IAHV,E,qDAkBJ,IAAD,OACL,OACI,6BACI,kBAAC,IAAD,KACI,yBAAKL,UAAU,kBACX,kBAAC,IAAD,CAAOyC,OAAK,EAACC,KAAK,mBAAmBC,OAAQ,SAAC5C,GAAD,OAAW,kBAAC,EAAD,iBAAmBA,EAAnB,CAA0BM,eAAgB,EAAKW,MAAMX,qBAC7G,kBAAC,IAAD,CAAOoC,OAAK,EAACC,KAAK,OAAOC,OAAQ,WAAW5C,GAAX,IAAEwB,EAAF,EAAEA,QAAF,OAAqB,kBAAC,EAAD,eAAcA,QAAWA,GAAaxB,EAAtC,CAA6CuB,oBAAqB,EAAKA,iC,GAzBxHV,aCI7BgC,IAASD,OACP,kBAAC,IAAME,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SFsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhB,QAAQgB,MAAMA,EAAMC,c","file":"static/js/main.57e51ae2.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css'\r\n\r\nconst Header = function (props) {\r\n    //inline stylinggi\r\n    // const headerStyle = {\r\n    //     textAlign: 'center',\r\n    //     padding: 20,\r\n    //     textTransform: 'uppercase',\r\n    //     background: '#000',\r\n    //     color: '#fff'\r\n    // };\r\n    return (\r\n        <div className='header'>\r\n            {props.header}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n//we dont need a class component as there is no state\r\n// class Header extends Component{\r\n//     render(){\r\n//         return(<div>Phone Directory</div>);\r\n//     }\r\n// }\r\n\r\nexport default Header;","import Header from './Header'\r\nimport './ShowSuscriber.css';\r\nimport React, { Component } from 'react';\r\nimport {Link} from 'react-router-dom'\r\n\r\nclass ShowSuscriber extends Component {\r\n  \r\n  render() {\r\n    return (\r\n\r\n      <div >\r\n        <Header header=\" Phone Directory\" />\r\n        <div className=\"component-body-container\">\r\n          <Link to=\"/add\"><button className=\"custom-btn add-btn\">Add</button></Link>\r\n\r\n          <div className=\"grid-container heading-container\">\r\n            <span className=\"grid-item name-heading\">Name</span>\r\n            <span className=\"grid-item phone-heading\">Phone</span>\r\n          </div>\r\n\r\n          {this.props.subscriberList.map(sub => {\r\n            return <div key={sub.id} className=\"grid-container\">\r\n              <span className=\"grid-item \">{sub.name}</span>\r\n              <span className=\"grid-item \">{sub.phone}</span>\r\n              <span className=\"grid-item\">\r\n                <button className=\"custom-btn delete-btn\" >Delete</button>\r\n              </span>\r\n            </div>\r\n          })}\r\n\r\n\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ShowSuscriber;\r\n\r\n// function App() {\r\n//   let subscribers = [\r\n//     {\r\n//       id: 1,\r\n//       name: \"Ayush\",\r\n//       phone: \"0000000000\"\r\n//     },\r\n//     {\r\n//       id: 2,\r\n//       name: \"Niharika\",\r\n//       phone: \"8888888888\"\r\n//     }\r\n//   ];\r\n\r\n// }\r\n\r\n","import React, { Component } from 'react';\r\nimport Header from './Header';\r\nimport './AddSuscriber.css'\r\nimport {Link} from 'react-router-dom'\r\n\r\nclass AddSuscriber extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            id: 0,\r\n            name: '',\r\n            phone: ''\r\n        }\r\n    }\r\n\r\n    inputChangedHandler = e => {\r\n        const state = this.state\r\n        state[e.target.name] = e.target.value;\r\n        this.setState(state)\r\n    }\r\n\r\n    onFormSubmitted = (e)=>{\r\n        e.preventDefault()\r\n        this.props.addSuscriberHandler(this.state)\r\n        this.setState({id: 0  , name : '' , phone : ''})\r\n        this.props.history.push('/')\r\n    }\r\n\r\n    render() {\r\n        const { name, phone } = this.state\r\n        return (\r\n            <div>\r\n                <Header header=\"Add Suscriber\" />\r\n                <div className=\"component-body-container\">\r\n                    <Link to=\"/phone-directory\"><button className=\"custom-btn\">BACK</button></Link>\r\n                    <form className=\"subscriber-form\" onSubmit = {this.onFormSubmitted.bind(this)}>\r\n                        <label htmlFor=\"name\" className=\"label-control\">Name</label><br />\r\n                        <input type=\"text\" id=\"name\" className=\"input-control\" name=\"name\" onChange={this.inputChangedHandler}></input><br /><br />\r\n                        <label htmlFor=\"phone\" className=\"label-control\">Phone</label><br />\r\n                        <input type=\"text\" id=\"phone\" className=\"input-control\" name=\"phone\" onChange={this.inputChangedHandler}></input><br />\r\n                        <div className=\"subscriber-info-container\">\r\n                            <span className=\"subscriber-to-add-heading\">Subscriber to add heading: </span><br />\r\n                            <span className=\"subscriber-info\">Name: {name}</span><br />\r\n                            <span className=\"subscriber-info\">Phone: {phone}</span><br />\r\n                        </div>\r\n                        <button type=\"submit\" className=\"custom-btn add-btn\">Add</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddSuscriber;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\r\nimport AddSuscriber from './AddSuscriber';\r\nimport ShowSuscriber from './ShowSuscriber';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\n\r\nclass PhoneDirectory extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            subscriberList: []\r\n        }\r\n    }\r\n\r\n    addSuscriberHandler = (newSuscriber) => {\r\n        let subscribersList = this.state.subscriberList;\r\n        if (subscribersList.length > 0) {\r\n            newSuscriber.id = subscribersList[subscribersList.length - 1].id + 1;\r\n        } else {\r\n            newSuscriber.id = 1;\r\n        }\r\n        subscribersList.push(newSuscriber)\r\n        this.setState({ subscriberList: subscribersList })\r\n        console.log(this.state.subscriberList)\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Router>\r\n                    <div className=\"main-container\">\r\n                        <Route exact path='/phone-directory' render={(props) => <ShowSuscriber {...props} subscriberList={this.state.subscriberList} />} />\r\n                        <Route exact path='/add' render={({history},props) => <AddSuscriber history = {history} {...props} addSuscriberHandler={this.addSuscriberHandler} />} />\r\n                    </div>\r\n                </Router>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PhoneDirectory;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport './common/common.css'\r\nimport ShowSuscriber from './ShowSuscriber';\r\nimport AddSuscriber from './AddSuscriber';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport PhoneDirectory from './PhoneDirectory';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <PhoneDirectory />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}